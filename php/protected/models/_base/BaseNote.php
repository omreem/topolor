<?php

/**
 * This is the model base class for the table "{{note}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Note".
 *
 * Columns in table "{{note}}" available as properties of the model,
 * followed by relations of table "{{note}}" available as properties of the model.
 *
 * @property string $id
 * @property string $learner_id
 * @property string $title
 * @property string $description
 * @property string $concept_id
 * @property string $tags
 * @property string $create_at
 * @property string $update_at
 *
 * @property Concept $concept
 * @property User $learner
 */
abstract class BaseNote extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{note}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Note|Notes', $n);
	}

	public static function representingColumn() {
		return 'title';
	}

	public function rules() {
		return array(
			array('title, description', 'required'),
			array('learner_id, concept_id', 'length', 'max'=>10),
			array('tags', 'match', 'pattern'=>'/^[\w\s,]+$/', 'message'=>'Tags can only contain word characters.'),
			array('tags', 'normalizeTags'),
			array('tags, update_at', 'safe'),
			array('concept_id, tags, update_at', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, learner_id, title, description, concept_id, tags, create_at, update_at', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'concept' => array(self::BELONGS_TO, 'Concept', 'concept_id'),
			'learner' => array(self::BELONGS_TO, 'User', 'learner_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'learner_id' => null,
			'title' => Yii::t('app', 'Title'),
			'description' => Yii::t('app', 'Description'),
			'concept_id' => null,
			'tags' => Yii::t('app', 'Tags'),
			'create_at' => Yii::t('app', 'Create At'),
			'update_at' => Yii::t('app', 'Update At'),
			'concept' => null,
			'learner' => null,
		);
	}

	public function search($interval, $tag='', $concept_id='', $pageSize=10) {
		$criteria = new CDbCriteria;
		
		if ($interval!='') {
			$now = date('Y-m-d');
			switch ($interval) {
				case 'today': {
					$criteria->addCondition("create_at >= '".date('Y-m-d')."'", 'AND');
					$criteria->addCondition("create_at < '".date('Y-m-d', mktime(0, 0, 0, date("m")  , date("d")+1, date("Y")))."'", 'AND');
					break;
				}
				case 'week': {
					$criteria->addCondition("create_at >= '".date('Y-m-d', strtotime('this week'))."'", 'AND');
					$criteria->addCondition("create_at < '".date('Y-m-d', strtotime('next week'))."'", 'AND');
					break;
				}
				case 'month': {
					$criteria->addCondition("create_at >= '".date('Y-m-d', mktime(0, 0, 0, date("m"), 1, date("Y")))."'", 'AND');
					$criteria->addCondition("create_at < '".date('Y-m-d', mktime(0, 0, 0, date("m")+1, 1, date("Y")))."'", 'AND');
					break;
				}
			}
		}
		
		if($tag != '')
			$criteria->addSearchCondition('tags',$tag);
		
		if ($concept_id != '') {
			$cArr = array();
			array_push($cArr, $concept_id);
			$criteria->addInCondition('concept_id', $cArr);
		}

		$criteria->compare('id', $this->id, true);
		$criteria->compare('learner_id', $this->learner_id);
		$criteria->compare('title', $this->title, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('concept_id', $this->concept_id);
		$criteria->compare('tags', $this->tags, true);
		$criteria->compare('create_at', $this->create_at, true);
		$criteria->compare('update_at', $this->update_at, true);

		$criteria->order = 'create_at DESC';

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
			'pagination' => array(
					'pageSize' => $pageSize,
			),
		));
	}
}