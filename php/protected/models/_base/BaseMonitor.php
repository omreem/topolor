<?php

/**
 * This is the model base class for the table "{{monitor}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Monitor".
 *
 * Columns in table "{{monitor}}" available as properties of the model,
 * followed by relations of table "{{monitor}}" available as properties of the model.
 *
 * @property string $id
 * @property string $user_id
 * @property string $controllor
 * @property string $action
 * @property string $type
 * @property string $request_key
 * @property string $request_value
 * @property string $create_at
 *
 * @property User $user
 */
abstract class BaseMonitor extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{monitor}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Monitor|Monitors', $n);
	}

	public static function representingColumn() {
		return 'controllor';
	}

	public function rules() {
		return array(
			array('user_id, controllor, action, create_at', 'required'),
			array('user_id', 'length', 'max'=>10),
			array('controllor, action', 'length', 'max'=>40),
			array('type', 'length', 'max'=>4),
			array('type', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, user_id, controllor, action, type, create_at', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'user' => array(self::BELONGS_TO, 'User', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'user_id' => null,
			'controllor' => Yii::t('app', 'Controllor'),
			'action' => Yii::t('app', 'Action'),
			'type' => Yii::t('app', 'Type'),
			'$request_key' => Yii::t('app', 'key'),
			'$request_value' => Yii::t('app', 'value'),
			'create_at' => Yii::t('app', 'Create At'),
			'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('controllor', $this->controllor, true);
		$criteria->compare('action', $this->action, true);
		$criteria->compare('type', $this->type, true);
		$criteria->compare('request_key', $this->request_key, true);
		$criteria->compare('request_value', $this->request_value, true);
		$criteria->compare('create_at', $this->create_at, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}